import unittest
from . import automatic_bike


class BikeTest(unittest.TestCase):
    def setUp(self) -> None:
        self.rider = automatic_bike.AutomaticBike()

    def test_that_object_exists(self):
        self.assertIsNotNone(self.rider)
        self.assertIsInstance(self.rider, automatic_bike.AutomaticBike)

    def test_that_bike_can_turnOn(self):
        self.rider.power_on()
        self.assertTrue(self.rider.is_on)

    def test_that_bike_can_turnOff(self):
        self.rider.power_on()
        self.rider.power_off()
        self.assertFalse(self.rider.is_on)

    def test_that_bike_can_accelerate_in_firstGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.assertEqual(5, self.rider.speed)

    def test_that_bike_can_accelerate_in_secondGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.assertEqual(10, self.rider.speed)

    def test_that_bike_can_accelerate_in_thirdGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.assertEqual(15, self.rider.speed)

    def test_that_bike_can_accelerate_in_fourthGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.assertEqual(20, self.rider.speed)

    def test_that_bike_acceleratingAboveFourthGearRemainsInFourthGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.assertEqual(20, self.rider.speed)

    def test_that_bike_can_decelerate(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.decelerate()
        self.assertEqual(2, self.rider.speed)

    def test_that_bike_can_decelerate_from_fourthGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.assertEqual(15, self.rider.speed)

    def test_that_bike_can_decelerate_from_thirdGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.assertEqual(10, self.rider.speed)

    def test_that_bike_can_decelerate_from_secondGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.assertEqual(5, self.rider.speed)

    def test_that_bike_can_decelerate_from_firstGear(self):
        self.rider.power_on()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.accelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.rider.decelerate()
        self.assertEqual(0, self.rider.speed)

    def test_that_bike_deceleratingBelowZeroRemainsAtZero(self):
        self.rider.power_on()
        self.rider.decelerate()
        self.assertEqual(0, self.rider.speed)


if __name__ == '__main__':
    unittest.main()
